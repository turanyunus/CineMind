// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  PREMIUM
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  bio           String?   @db.Text
  
  // Premium features
  premiumUntil  DateTime?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  watchlist     Movie[]   @relation("Watchlist")
  watched       Movie[]   @relation("Watched")
  comments      Comment[]
  likes         Like[]
  followers     Follow[]  @relation("Following")
  following     Follow[]  @relation("Followers")
  reviews       Review[]
  pollVotes     PollVote[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id          String   @id @default(cuid())
  tmdbId      Int      @unique
  title       String
  posterPath  String?
  releaseDate DateTime?
  overview    String?  @db.Text
  voteAverage Float?
  genres      String[]
  
  // Relations
  watchlistedBy User[]     @relation("Watchlist")
  watchedBy     User[]     @relation("Watched")
  comments      Comment[]
  likes         Like[]
  reviews       Review[]
  polls         Poll[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  movieId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  likes     Like[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  content   String   @db.Text
  userId    String
  movieId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  likes     Like[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, movieId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  movieId   String?
  commentId String?
  reviewId  String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, movieId])
  @@unique([userId, commentId])
  @@unique([userId, reviewId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Poll {
  id          String     @id @default(cuid())
  question    String
  options     String[]
  movieId     String
  movie       Movie      @relation(fields: [movieId], references: [id], onDelete: Cascade)
  votes       PollVote[]
  
  createdAt   DateTime   @default(now())
  endsAt      DateTime
}

model PollVote {
  id          String   @id @default(cuid())
  pollId      String
  userId      String
  optionIndex Int
  
  poll        Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())

  @@unique([pollId, userId])
}
